{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/dresito/GitHub/Trade-Learn-Frontend/src/components/CourseFlow/VideoContent.js\";\nimport React from 'react';\n\nconst VideoContent = ({\n  content\n}) => {\n  const {\n    title,\n    url\n  } = content; // Function to convert YouTube links to embed URLs\n\n  const getEmbedUrl = url => {\n    const videoId = url.split('v=')[1];\n    return `https://www.youtube.com/embed/${videoId}`;\n  }; // Check if the provided URL is a YouTube link\n\n\n  const isYouTubeLink = url => {\n    return url.includes('youtube.com') || url.includes('youtu.be');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), isYouTubeLink(url) ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n      width: \"560\",\n      height: \"315\",\n      src: getEmbedUrl(url),\n      title: title,\n      frameBorder: \"0\",\n      allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n      allowFullScreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"video\", {\n      controls: true,\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: url,\n        type: \"video/mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), \"Your browser does not support the video tag.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_c = VideoContent;\nexport default VideoContent;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoContent\");","map":{"version":3,"sources":["/home/dresito/GitHub/Trade-Learn-Frontend/src/components/CourseFlow/VideoContent.js"],"names":["React","VideoContent","content","title","url","getEmbedUrl","videoId","split","isYouTubeLink","includes"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AACpC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAiBF,OAAvB,CADoC,CAGpC;;AACA,QAAMG,WAAW,GAAID,GAAD,IAAS;AAC3B,UAAME,OAAO,GAAGF,GAAG,CAACG,KAAJ,CAAU,IAAV,EAAgB,CAAhB,CAAhB;AACA,WAAQ,iCAAgCD,OAAQ,EAAhD;AACD,GAHD,CAJoC,CASpC;;;AACA,QAAME,aAAa,GAAIJ,GAAD,IAAS;AAC7B,WAAOA,GAAG,CAACK,QAAJ,CAAa,aAAb,KAA+BL,GAAG,CAACK,QAAJ,CAAa,UAAb,CAAtC;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACE;AAAA,gBAAKN;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,EAEGK,aAAa,CAACJ,GAAD,CAAb,gBACC;AACE,MAAA,KAAK,EAAC,KADR;AAEE,MAAA,MAAM,EAAC,KAFT;AAGE,MAAA,GAAG,EAAEC,WAAW,CAACD,GAAD,CAHlB;AAIE,MAAA,KAAK,EAAED,KAJT;AAKE,MAAA,WAAW,EAAC,GALd;AAME,MAAA,KAAK,EAAC,yEANR;AAOE,MAAA,eAAe;AAPjB;AAAA;AAAA;AAAA;AAAA,YADD,gBAWC;AAAO,MAAA,QAAQ,MAAf;AAAA,8BACE;AAAQ,QAAA,GAAG,EAAEC,GAAb;AAAkB,QAAA,IAAI,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CAnCD;;KAAMH,Y;AAqCN,eAAeA,YAAf","sourcesContent":["import React from 'react';\n\nconst VideoContent = ({ content }) => {\n  const { title, url } = content;\n\n  // Function to convert YouTube links to embed URLs\n  const getEmbedUrl = (url) => {\n    const videoId = url.split('v=')[1];\n    return `https://www.youtube.com/embed/${videoId}`;\n  };\n\n  // Check if the provided URL is a YouTube link\n  const isYouTubeLink = (url) => {\n    return url.includes('youtube.com') || url.includes('youtu.be');\n  };\n\n  return (\n    <div className=\"content-box\">\n      <h4>{title}</h4>\n      {isYouTubeLink(url) ? (\n        <iframe\n          width=\"560\"\n          height=\"315\"\n          src={getEmbedUrl(url)}\n          title={title}\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n          allowFullScreen\n        ></iframe>\n      ) : (\n        <video controls>\n          <source src={url} type=\"video/mp4\" />\n          Your browser does not support the video tag.\n        </video>\n      )}\n    </div>\n  );\n};\n\nexport default VideoContent;\n\n"]},"metadata":{},"sourceType":"module"}