{"ast":null,"code":"import create from \"zustand\";\nconst initialState = {\n  course: {\n    name: \"\",\n    description: \"\",\n    modules: []\n  }\n};\nconst useCourseStore = create(set => ({\n  // State\n  course: initialState.course,\n  // Actions\n  // Actions\n  handleAddModule: () => {\n    set(state => {\n      const newModule = {\n        name: \"\",\n        content: []\n      };\n      return {\n        course: {\n          modules: [...state.course.modules, newModule]\n        }\n      };\n    });\n  },\n  handleModuleChange: (index, fieldName, fieldValue) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === index) {\n          return { ...module,\n            [fieldName]: fieldValue\n          };\n        }\n\n        return module;\n      });\n      return {\n        course: {\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleDeleteModule: moduleIndex => {\n    set(state => {\n      const updatedModules = state.course.modules.filter((module, idx) => idx !== moduleIndex);\n      return {\n        course: {\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  setModuleContent: (moduleIndex, content) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          return { ...module,\n            content\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  deleteContent: (moduleIndex, contentIndex) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          const updatedContent = [...module.content];\n          updatedContent.splice(contentIndex, 1);\n          return { ...module,\n            content: updatedContent\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  addContent: (moduleIndex, contentType) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          let updatedContent = [...(module.content || [])];\n\n          if (contentType === \"video\") {\n            updatedContent.push({\n              type: \"video\",\n              url: \"\"\n            });\n          } else if (contentType === \"text\") {\n            updatedContent.push({\n              type: \"text\",\n              text: \"\"\n            });\n          } else if (contentType === \"quiz\") {\n            const existingQuizIndex = updatedContent.findIndex(content => content.type === \"quiz\");\n\n            if (existingQuizIndex === -1) {\n              const quizData = {\n                question: \"\",\n                answers: [\"\", \"\", \"\", \"\"],\n                correctAnswer: \"\"\n              };\n              updatedContent.push({\n                type: \"quiz\",\n                question: [quizData]\n              });\n            }\n          }\n\n          return { ...module,\n            content: updatedContent\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleQuestion: (moduleIndex, questionIndex, key, value) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex]\n          };\n          updatedQuestion.question = value;\n          return { ...module,\n            content: module.content.map((content, cIdx) => cIdx === questionIndex ? updatedQuestion : content)\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleAnswerChange: (moduleIndex, questionIndex, answerIndex, value) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex]\n          };\n          updatedQuestion.answers[answerIndex] = value;\n          return { ...module,\n            content: module.content.map((content, cIdx) => cIdx === questionIndex ? updatedQuestion : content)\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleCorrectAnswerChange: (moduleIndex, questionIndex, value) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex]\n          };\n          updatedQuestion.correctAnswer = value;\n          return { ...module,\n            content: module.content.map((content, cIdx) => cIdx === questionIndex ? updatedQuestion : content)\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleAddQuestion: moduleIndex => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          const updatedContent = [...(module.content || [])];\n          const existingQuizIndex = updatedContent.findIndex(content => content.type === \"quiz\");\n\n          if (existingQuizIndex !== -1) {\n            const updatedQuestion = {\n              question: \"\",\n              answers: [\"\", \"\", \"\", \"\"],\n              correctAnswer: \"\"\n            };\n            updatedContent[existingQuizIndex].question.push(updatedQuestion);\n          }\n\n          return { ...module,\n            content: updatedContent\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleDeleteQuestion: (moduleIndex, questionIndex) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedContent = [...module.content];\n          updatedContent[questionIndex].question.splice(questionIndex, 1);\n          return { ...module,\n            content: updatedContent\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleContentChange: (moduleIndex, contentIndex, fieldName, fieldValue) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, mIndex) => {\n        if (mIndex === moduleIndex) {\n          const updatedContent = module.content.map((content, cIndex) => {\n            if (cIndex === contentIndex) {\n              return { ...content,\n                [fieldName]: fieldValue\n              };\n            }\n\n            return content;\n          });\n          return { ...module,\n            content: updatedContent\n          };\n        }\n\n        return module;\n      });\n      return {\n        course: {\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleInputChange: (fieldName, fieldValue) => {\n    set(state => ({\n      course: { ...state.course,\n        [fieldName]: fieldValue\n      }\n    }));\n  }\n}));\nexport default useCourseStore;","map":{"version":3,"sources":["/home/dresito/GitHub/Trade-Learn-Frontend/src/store/store.js"],"names":["create","initialState","course","name","description","modules","useCourseStore","set","handleAddModule","state","newModule","content","handleModuleChange","index","fieldName","fieldValue","updatedModules","map","module","idx","handleDeleteModule","moduleIndex","filter","setModuleContent","deleteContent","contentIndex","updatedContent","splice","addContent","contentType","push","type","url","text","existingQuizIndex","findIndex","quizData","question","answers","correctAnswer","handleQuestion","questionIndex","key","value","updatedQuestion","cIdx","handleAnswerChange","answerIndex","handleCorrectAnswerChange","handleAddQuestion","handleDeleteQuestion","handleContentChange","mIndex","cIndex","handleInputChange"],"mappings":"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","sourcesContent":["import create from \"zustand\"\n\nconst initialState = {\n  course: {\n    name: \"\",\n    description: \"\",\n    modules: []\n  }\n}\n\nconst useCourseStore = create((set) => ({\n  // State\n  course: initialState.course,\n\n  // Actions\n\n  // Actions\n\n  handleAddModule: () => {\n    set((state) => {\n      const newModule = { name: \"\", content: [] };\n      return { course: { modules: [...state.course.modules, newModule] } };\n    });\n  },\n\n  handleModuleChange: (index, fieldName, fieldValue) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === index) {\n          return { ...module, [fieldName]: fieldValue };\n        }\n        return module;\n      });\n      return { course: { modules: updatedModules } };\n    });\n  },\n\n  handleDeleteModule: (moduleIndex) => {\n    set((state) => {\n      const updatedModules = state.course.modules.filter((module, idx) => idx !== moduleIndex);\n      return { course: { modules: updatedModules } };\n    });\n  },\n\n  setModuleContent: (moduleIndex, content) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          return { ...module, content };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  deleteContent: (moduleIndex, contentIndex) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          const updatedContent = [...module.content];\n          updatedContent.splice(contentIndex, 1);\n          return { ...module, content: updatedContent };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  addContent: (moduleIndex, contentType) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          let updatedContent = [...(module.content || [])];\n\n          if (contentType === \"video\") {\n            updatedContent.push({ type: \"video\", url: \"\" });\n          } else if (contentType === \"text\") {\n            updatedContent.push({ type: \"text\", text: \"\" });\n          } else if (contentType === \"quiz\") {\n            const existingQuizIndex = updatedContent.findIndex((content) => content.type === \"quiz\");\n            if (existingQuizIndex === -1) {\n              const quizData = {\n                question: \"\",\n                answers: [\"\", \"\", \"\", \"\"],\n                correctAnswer: \"\",\n              };\n              updatedContent.push({ type: \"quiz\", question: [quizData] });\n            }\n          }\n\n          return { ...module, content: updatedContent };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleQuestion: (moduleIndex, questionIndex, key, value) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex] };\n          updatedQuestion.question = value;\n          return {\n            ...module,\n            content: module.content.map((content, cIdx) => (cIdx === questionIndex ? updatedQuestion : content)),\n          };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleAnswerChange: (moduleIndex, questionIndex, answerIndex, value) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex] };\n          updatedQuestion.answers[answerIndex] = value;\n          return {\n            ...module,\n            content: module.content.map((content, cIdx) => (cIdx === questionIndex ? updatedQuestion : content)),\n          };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleCorrectAnswerChange: (moduleIndex, questionIndex, value) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex] };\n          updatedQuestion.correctAnswer = value;\n          return {\n            ...module,\n            content: module.content.map((content, cIdx) => (cIdx === questionIndex ? updatedQuestion : content)),\n          };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleAddQuestion: (moduleIndex) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          const updatedContent = [...(module.content || [])];\n          const existingQuizIndex = updatedContent.findIndex((content) => content.type === \"quiz\");\n\n          if (existingQuizIndex !== -1) {\n            const updatedQuestion = { question: \"\", answers: [\"\", \"\", \"\", \"\"], correctAnswer: \"\" };\n            updatedContent[existingQuizIndex].question.push(updatedQuestion);\n          }\n\n          return { ...module, content: updatedContent };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleDeleteQuestion: (moduleIndex, questionIndex) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedContent = [...module.content];\n          updatedContent[questionIndex].question.splice(questionIndex, 1);\n          return { ...module, content: updatedContent };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleContentChange: (moduleIndex, contentIndex, fieldName, fieldValue) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, mIndex) => {\n        if (mIndex === moduleIndex) {\n          const updatedContent = module.content.map((content, cIndex) => {\n            if (cIndex === contentIndex) {\n              return { ...content, [fieldName]: fieldValue };\n            }\n            return content;\n          });\n          return { ...module, content: updatedContent };\n        }\n        return module;\n      });\n      return { course: { modules: updatedModules } };\n    });\n  },\n\n  handleInputChange: (fieldName, fieldValue) => {\n    set((state) => ({\n      course: {\n        ...state.course,\n        [fieldName]: fieldValue,\n      },\n    }));\n  },\n\n}))\n\nexport default useCourseStore;"]},"metadata":{},"sourceType":"module"}