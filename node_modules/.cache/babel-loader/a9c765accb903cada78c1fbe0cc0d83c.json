{"ast":null,"code":"import create from \"zustand\";\nconst initialState = {\n  course: {\n    name: \"\",\n    description: \"\",\n    modules: []\n  }\n};\nconst useCourseStore = create(set => ({\n  // State\n  course: initialState.course,\n  // Actions\n  // Actions\n  setCourse: newCourse => set({\n    course: newCourse\n  }),\n  updateModuleInfo: (moduleIndex, key, value) => {\n    set(state => {\n      const updatedModules = [...state.course.modules];\n      updatedModules[moduleIndex][key] = value;\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleAddModule: () => {\n    set(state => {\n      const newModule = {\n        name: \"\",\n        content: []\n      };\n      return {\n        course: {\n          modules: [...state.course.modules, newModule]\n        }\n      };\n    });\n  },\n  handleModuleChange: (index, fieldName, fieldValue) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === index) {\n          return { ...module,\n            [fieldName]: fieldValue\n          };\n        }\n\n        return module;\n      });\n      return {\n        course: {\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleDeleteModule: moduleIndex => {\n    set(state => {\n      const updatedModules = state.course.modules.filter((module, idx) => idx !== moduleIndex);\n      return {\n        course: {\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  setModuleContent: (moduleIndex, content) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          return { ...module,\n            content\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  deleteContent: (moduleIndex, contentIndex) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          const updatedContent = [...module.content];\n          updatedContent.splice(contentIndex, 1);\n          return { ...module,\n            content: updatedContent\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  addContent: (moduleIndex, contentType) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          let updatedContent = [...(module.content || [])];\n\n          if (contentType === \"video\") {\n            updatedContent.push({\n              type: \"video\",\n              url: \"\"\n            });\n          } else if (contentType === \"text\") {\n            updatedContent.push({\n              type: \"text\",\n              text: \"\"\n            });\n          } else if (contentType === \"quiz\") {\n            const existingQuizIndex = updatedContent.findIndex(content => content.type === \"quiz\");\n\n            if (existingQuizIndex === -1) {\n              const quizData = {\n                question: \"\",\n                answers: [\"\", \"\", \"\", \"\"],\n                correctAnswer: \"\"\n              };\n              updatedContent.push({\n                type: \"quiz\",\n                question: [quizData]\n              });\n            }\n          }\n\n          return { ...module,\n            content: updatedContent\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleQuestion: (moduleIndex, questionIndex, key, value) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex]\n          };\n          updatedQuestion.question = value;\n          return { ...module,\n            content: module.content.map((content, cIdx) => cIdx === questionIndex ? updatedQuestion : content)\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleAnswerChange: (moduleIndex, questionIndex, answerIndex, value) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex]\n          };\n          updatedQuestion.answers[answerIndex] = value;\n          return { ...module,\n            content: module.content.map((content, cIdx) => cIdx === questionIndex ? updatedQuestion : content)\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleCorrectAnswerChange: (moduleIndex, questionIndex, value) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex]\n          };\n          updatedQuestion.correctAnswer = value;\n          return { ...module,\n            content: module.content.map((content, cIdx) => cIdx === questionIndex ? updatedQuestion : content)\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleAddQuestion: moduleIndex => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          const updatedContent = [...(module.content || [])];\n          const existingQuizIndex = updatedContent.findIndex(content => content.type === \"quiz\");\n\n          if (existingQuizIndex !== -1) {\n            const updatedQuestion = {\n              question: \"\",\n              answers: [\"\", \"\", \"\", \"\"],\n              correctAnswer: \"\"\n            };\n            updatedContent[existingQuizIndex].question.push(updatedQuestion);\n          }\n\n          return { ...module,\n            content: updatedContent\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleDeleteQuestion: (moduleIndex, questionIndex) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedContent = [...module.content];\n          updatedContent[questionIndex].question.splice(questionIndex, 1);\n          return { ...module,\n            content: updatedContent\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  }\n}));\nexport default useCourseStore;","map":{"version":3,"sources":["/home/dresito/GitHub/Trade-Learn-Frontend/src/store/store.js"],"names":["create","initialState","course","name","description","modules","useCourseStore","set","setCourse","newCourse","updateModuleInfo","moduleIndex","key","value","state","updatedModules","handleAddModule","newModule","content","handleModuleChange","index","fieldName","fieldValue","map","module","idx","handleDeleteModule","filter","setModuleContent","deleteContent","contentIndex","updatedContent","splice","addContent","contentType","push","type","url","text","existingQuizIndex","findIndex","quizData","question","answers","correctAnswer","handleQuestion","questionIndex","updatedQuestion","cIdx","handleAnswerChange","answerIndex","handleCorrectAnswerChange","handleAddQuestion","handleDeleteQuestion"],"mappings":"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","sourcesContent":["import create from \"zustand\"\n\nconst initialState = {\n  course: {\n    name: \"\",\n    description: \"\",\n    modules: []\n  }\n}\n\nconst useCourseStore = create((set) => ({\n  // State\n  course: initialState.course,\n\n  // Actions\n\n  // Actions\n  setCourse: (newCourse) => set({ course: newCourse }),\n\n  updateModuleInfo: (moduleIndex, key, value) => {\n    set((state) => {\n      const updatedModules = [...state.course.modules];\n      updatedModules[moduleIndex][key] = value;\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleAddModule: () => {\n    set((state) => {\n      const newModule = { name: \"\", content: [] };\n      return { course: { modules: [...state.course.modules, newModule] } };\n    });\n  },\n\n  handleModuleChange: (index, fieldName, fieldValue) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === index) {\n          return { ...module, [fieldName]: fieldValue };\n        }\n        return module;\n      });\n      return { course: { modules: updatedModules } };\n    });\n  },\n\n  handleDeleteModule: (moduleIndex) => {\n    set((state) => {\n      const updatedModules = state.course.modules.filter((module, idx) => idx !== moduleIndex);\n      return { course: { modules: updatedModules } };\n    });\n  },\n\n  setModuleContent: (moduleIndex, content) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          return { ...module, content };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  deleteContent: (moduleIndex, contentIndex) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          const updatedContent = [...module.content];\n          updatedContent.splice(contentIndex, 1);\n          return { ...module, content: updatedContent };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  addContent: (moduleIndex, contentType) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          let updatedContent = [...(module.content || [])];\n\n          if (contentType === \"video\") {\n            updatedContent.push({ type: \"video\", url: \"\" });\n          } else if (contentType === \"text\") {\n            updatedContent.push({ type: \"text\", text: \"\" });\n          } else if (contentType === \"quiz\") {\n            const existingQuizIndex = updatedContent.findIndex((content) => content.type === \"quiz\");\n            if (existingQuizIndex === -1) {\n              const quizData = {\n                question: \"\",\n                answers: [\"\", \"\", \"\", \"\"],\n                correctAnswer: \"\",\n              };\n              updatedContent.push({ type: \"quiz\", question: [quizData] });\n            }\n          }\n\n          return { ...module, content: updatedContent };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleQuestion: (moduleIndex, questionIndex, key, value) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex] };\n          updatedQuestion.question = value;\n          return {\n            ...module,\n            content: module.content.map((content, cIdx) => (cIdx === questionIndex ? updatedQuestion : content)),\n          };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleAnswerChange: (moduleIndex, questionIndex, answerIndex, value) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex] };\n          updatedQuestion.answers[answerIndex] = value;\n          return {\n            ...module,\n            content: module.content.map((content, cIdx) => (cIdx === questionIndex ? updatedQuestion : content)),\n          };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleCorrectAnswerChange: (moduleIndex, questionIndex, value) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex] };\n          updatedQuestion.correctAnswer = value;\n          return {\n            ...module,\n            content: module.content.map((content, cIdx) => (cIdx === questionIndex ? updatedQuestion : content)),\n          };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleAddQuestion: (moduleIndex) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          const updatedContent = [...(module.content || [])];\n          const existingQuizIndex = updatedContent.findIndex((content) => content.type === \"quiz\");\n\n          if (existingQuizIndex !== -1) {\n            const updatedQuestion = { question: \"\", answers: [\"\", \"\", \"\", \"\"], correctAnswer: \"\" };\n            updatedContent[existingQuizIndex].question.push(updatedQuestion);\n          }\n\n          return { ...module, content: updatedContent };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleDeleteQuestion: (moduleIndex, questionIndex) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedContent = [...module.content];\n          updatedContent[questionIndex].question.splice(questionIndex, 1);\n          return { ...module, content: updatedContent };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  }\n\n}))\n\nexport default useCourseStore;"]},"metadata":{},"sourceType":"module"}