{"ast":null,"code":"import create from \"zustand\";\nconst initialState = {\n  course: {\n    name: \"\",\n    description: \"\",\n    modules: []\n  }\n};\nconst useCourseStore = create(set => ({\n  // State\n  course: initialState.course,\n  selectedOption: \"video\",\n  // Actions\n  // Actions\n  handleAddModule: () => {\n    set(state => {\n      const newModule = {\n        name: \"\",\n        content: []\n      };\n      return {\n        course: {\n          modules: [...state.course.modules, newModule]\n        }\n      };\n    });\n  },\n  handleModuleChange: (index, fieldName, fieldValue) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === index) {\n          return { ...module,\n            [fieldName]: fieldValue\n          };\n        }\n\n        return module;\n      });\n      return {\n        course: {\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleDeleteContent: (moduleIndex, contentIndex) => {\n    set(state => ({\n      course: { ...state.course,\n        modules: state.course.modules.map((module, idx) => {\n          if (idx === moduleIndex) {\n            const updatedContents = module.content.filter((content, cIdx) => cIdx !== contentIndex);\n            return { ...module,\n              content: updatedContents\n            };\n          }\n\n          return module;\n        })\n      }\n    }));\n  },\n  handleAddContent: moduleIndex => {\n    set(state => ({\n      course: { ...state.course,\n        modules: state.course.modules.map((module, idx) => {\n          if (idx === moduleIndex) {\n            let updatedContents = [...(module.content || [])]; // Ensure content array exists or initialize as empty array\n\n            if (state.selectedOption === \"video\") {\n              updatedContents.push({\n                type: \"video\",\n                url: \"\"\n              });\n            } else if (state.selectedOption === \"text\") {\n              updatedContents.push({\n                type: \"text\",\n                text: \"\"\n              });\n            } else if (state.selectedOption === \"quiz\") {\n              // Check if there's already a quiz content, if not, add it\n              const existingQuizContentIndex = updatedContents.findIndex(content => content.type === \"quiz\");\n\n              if (existingQuizContentIndex === -1) {\n                const quizData = {\n                  question: \"\",\n                  answers: [\"\", \"\", \"\", \"\"],\n                  correctAnswer: \"\"\n                };\n                updatedContents.push({\n                  type: \"quiz\",\n                  question: [quizData]\n                });\n              }\n            }\n\n            return { ...module,\n              content: updatedContents\n            };\n          }\n\n          return module;\n        })\n      }\n    }));\n  },\n  handleDeleteModule: moduleIndex => {\n    set(state => {\n      const updatedModules = state.course.modules.filter((module, idx) => idx !== moduleIndex);\n      return {\n        course: {\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleQuestion: (moduleIndex, questionIndex, key, value) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex]\n          };\n          updatedQuestion.question = value;\n          return { ...module,\n            content: module.content.map((content, cIdx) => cIdx === questionIndex ? updatedQuestion : content)\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleAnswerChange: (moduleIndex, questionIndex, answerIndex, value) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex]\n          };\n          updatedQuestion.answers[answerIndex] = value;\n          return { ...module,\n            content: module.content.map((content, cIdx) => cIdx === questionIndex ? updatedQuestion : content)\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleCorrectAnswerChange: (moduleIndex, questionIndex, value) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex]\n          };\n          updatedQuestion.correctAnswer = value;\n          return { ...module,\n            content: module.content.map((content, cIdx) => cIdx === questionIndex ? updatedQuestion : content)\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleAddQuestion: moduleIndex => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          const updatedContent = [...(module.content || [])];\n          const existingQuizIndex = updatedContent.findIndex(content => content.type === \"quiz\");\n\n          if (existingQuizIndex !== -1) {\n            const updatedQuestion = {\n              question: \"\",\n              answers: [\"\", \"\", \"\", \"\"],\n              correctAnswer: \"\"\n            };\n            updatedContent[existingQuizIndex].question.push(updatedQuestion);\n          }\n\n          return { ...module,\n            content: updatedContent\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleDeleteQuestion: (moduleIndex, questionIndex) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedContent = [...module.content];\n          updatedContent[questionIndex].question.splice(questionIndex, 1);\n          return { ...module,\n            content: updatedContent\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleContentChange: (moduleIndex, contentIndex, fieldName, fieldValue) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, mIndex) => {\n        if (mIndex === moduleIndex) {\n          const updatedContent = module.content.map((content, cIndex) => {\n            if (cIndex === contentIndex) {\n              return { ...content,\n                [fieldName]: fieldValue\n              };\n            }\n\n            return content;\n          });\n          return { ...module,\n            content: updatedContent\n          };\n        }\n\n        return module;\n      });\n      return {\n        course: {\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleInputChange: (fieldName, fieldValue) => {\n    set(state => ({\n      course: { ...state.course,\n        [fieldName]: fieldValue\n      }\n    }));\n  }\n}));\nexport default useCourseStore;","map":{"version":3,"sources":["/home/dresito/GitHub/Trade-Learn-Frontend/src/store/store.js"],"names":["create","initialState","course","name","description","modules","useCourseStore","set","selectedOption","handleAddModule","state","newModule","content","handleModuleChange","index","fieldName","fieldValue","updatedModules","map","module","idx","handleDeleteContent","moduleIndex","contentIndex","updatedContents","filter","cIdx","handleAddContent","push","type","url","text","existingQuizContentIndex","findIndex","quizData","question","answers","correctAnswer","handleDeleteModule","handleQuestion","questionIndex","key","value","updatedQuestion","handleAnswerChange","answerIndex","handleCorrectAnswerChange","handleAddQuestion","updatedContent","existingQuizIndex","handleDeleteQuestion","splice","handleContentChange","mIndex","cIndex","handleInputChange"],"mappings":"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","sourcesContent":["import create from \"zustand\"\n\nconst initialState = {\n  course: {\n    name: \"\",\n    description: \"\",\n    modules: []\n  }\n}\n\nconst useCourseStore = create((set) => ({\n  // State\n  course: initialState.course,\n  selectedOption: \"video\",\n\n  // Actions\n\n  // Actions\n\n  handleAddModule: () => {\n    set((state) => {\n      const newModule = { name: \"\", content: [] };\n      return { course: { modules: [...state.course.modules, newModule] } };\n    });\n  },\n\n  handleModuleChange: (index, fieldName, fieldValue) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === index) {\n          return { ...module, [fieldName]: fieldValue };\n        }\n        return module;\n      });\n      return { course: { modules: updatedModules } };\n    });\n  },\n\n  handleDeleteContent: (moduleIndex, contentIndex) => {\n    set((state) => ({\n      course: {\n        ...state.course,\n        modules: state.course.modules.map((module, idx) => {\n          if (idx === moduleIndex) {\n            const updatedContents = module.content.filter((content, cIdx) => cIdx !== contentIndex);\n            return {\n              ...module,\n              content: updatedContents,\n            };\n          }\n          return module;\n        }),\n      },\n    }));\n  },\n\n  handleAddContent: (moduleIndex) => {\n    set((state) => ({\n      course: {\n        ...state.course,\n        modules: state.course.modules.map((module, idx) => {\n          if (idx === moduleIndex) {\n            let updatedContents = [...(module.content || [])]; // Ensure content array exists or initialize as empty array\n\n            if (state.selectedOption === \"video\") {\n              updatedContents.push({ type: \"video\", url: \"\" });\n            } else if (state.selectedOption === \"text\") {\n              updatedContents.push({ type: \"text\", text: \"\" });\n            } else if (state.selectedOption === \"quiz\") {\n              // Check if there's already a quiz content, if not, add it\n              const existingQuizContentIndex = updatedContents.findIndex(content => content.type === \"quiz\");\n              if (existingQuizContentIndex === -1) {\n                const quizData = {\n                  question: \"\",\n                  answers: [\"\", \"\", \"\", \"\"],\n                  correctAnswer: \"\",\n                };\n                updatedContents.push({ type: \"quiz\", question: [quizData] });\n              }\n            }\n\n            return {\n              ...module,\n              content: updatedContents,\n            };\n          }\n          return module;\n        }),\n      },\n    }));\n  },\n\n  handleDeleteModule: (moduleIndex) => {\n    set((state) => {\n      const updatedModules = state.course.modules.filter((module, idx) => idx !== moduleIndex);\n      return { course: { modules: updatedModules } };\n    });\n  },\n\n\n  handleQuestion: (moduleIndex, questionIndex, key, value) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex] };\n          updatedQuestion.question = value;\n          return {\n            ...module,\n            content: module.content.map((content, cIdx) => (cIdx === questionIndex ? updatedQuestion : content)),\n          };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleAnswerChange: (moduleIndex, questionIndex, answerIndex, value) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex] };\n          updatedQuestion.answers[answerIndex] = value;\n          return {\n            ...module,\n            content: module.content.map((content, cIdx) => (cIdx === questionIndex ? updatedQuestion : content)),\n          };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleCorrectAnswerChange: (moduleIndex, questionIndex, value) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex] };\n          updatedQuestion.correctAnswer = value;\n          return {\n            ...module,\n            content: module.content.map((content, cIdx) => (cIdx === questionIndex ? updatedQuestion : content)),\n          };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleAddQuestion: (moduleIndex) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          const updatedContent = [...(module.content || [])];\n          const existingQuizIndex = updatedContent.findIndex((content) => content.type === \"quiz\");\n\n          if (existingQuizIndex !== -1) {\n            const updatedQuestion = { question: \"\", answers: [\"\", \"\", \"\", \"\"], correctAnswer: \"\" };\n            updatedContent[existingQuizIndex].question.push(updatedQuestion);\n          }\n\n          return { ...module, content: updatedContent };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleDeleteQuestion: (moduleIndex, questionIndex) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedContent = [...module.content];\n          updatedContent[questionIndex].question.splice(questionIndex, 1);\n          return { ...module, content: updatedContent };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleContentChange: (moduleIndex, contentIndex, fieldName, fieldValue) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, mIndex) => {\n        if (mIndex === moduleIndex) {\n          const updatedContent = module.content.map((content, cIndex) => {\n            if (cIndex === contentIndex) {\n              return { ...content, [fieldName]: fieldValue };\n            }\n            return content;\n          });\n          return { ...module, content: updatedContent };\n        }\n        return module;\n      });\n      return { course: { modules: updatedModules } };\n    });\n  },\n\n  handleInputChange: (fieldName, fieldValue) => {\n    set((state) => ({\n      course: {\n        ...state.course,\n        [fieldName]: fieldValue,\n      },\n    }));\n  },\n\n}))\n\nexport default useCourseStore;"]},"metadata":{},"sourceType":"module"}