{"ast":null,"code":"import create from \"zustand\";\nconst initialState = {\n  course: {\n    name: \"\",\n    description: \"\",\n    modules: []\n  }\n};\nconst useCourseStore = create(set => ({\n  // State\n  course: initialState.course,\n  // Actions\n  // Actions\n  setCourse: newCourse => set({\n    course: newCourse\n  }),\n  updateModuleInfo: (moduleIndex, key, value) => {\n    set(state => {\n      const updatedModules = [...state.course.modules];\n      updatedModules[moduleIndex][key] = value;\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  setModuleContent: (moduleIndex, content) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          return { ...module,\n            content\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  deleteContent: (moduleIndex, contentIndex) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          const updatedContent = [...module.content];\n          updatedContent.splice(contentIndex, 1);\n          return { ...module,\n            content: updatedContent\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  addContent: (moduleIndex, contentType) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          let updatedContent = [...(module.content || [])];\n\n          if (contentType === \"video\") {\n            updatedContent.push({\n              type: \"video\",\n              url: \"\"\n            });\n          } else if (contentType === \"text\") {\n            updatedContent.push({\n              type: \"text\",\n              text: \"\"\n            });\n          } else if (contentType === \"quiz\") {\n            const existingQuizIndex = updatedContent.findIndex(content => content.type === \"quiz\");\n\n            if (existingQuizIndex === -1) {\n              const quizData = {\n                question: \"\",\n                answers: [\"\", \"\", \"\", \"\"],\n                correctAnswer: \"\"\n              };\n              updatedContent.push({\n                type: \"quiz\",\n                question: [quizData]\n              });\n            }\n          }\n\n          return { ...module,\n            content: updatedContent\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleQuestion: (moduleIndex, questionIndex, key, value) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex]\n          };\n          updatedQuestion.question = value;\n          return { ...module,\n            content: module.content.map((content, cIdx) => cIdx === questionIndex ? updatedQuestion : content)\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleAnswerChange: (moduleIndex, questionIndex, answerIndex, value) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex]\n          };\n          updatedQuestion.answers[answerIndex] = value;\n          return { ...module,\n            content: module.content.map((content, cIdx) => cIdx === questionIndex ? updatedQuestion : content)\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleCorrectAnswerChange: (moduleIndex, questionIndex, value) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex]\n          };\n          updatedQuestion.correctAnswer = value;\n          return { ...module,\n            content: module.content.map((content, cIdx) => cIdx === questionIndex ? updatedQuestion : content)\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleAddQuestion: moduleIndex => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          const updatedContent = [...(module.content || [])];\n          const existingQuizIndex = updatedContent.findIndex(content => content.type === \"quiz\");\n\n          if (existingQuizIndex !== -1) {\n            const updatedQuestion = {\n              question: \"\",\n              answers: [\"\", \"\", \"\", \"\"],\n              correctAnswer: \"\"\n            };\n            updatedContent[existingQuizIndex].question.push(updatedQuestion);\n          }\n\n          return { ...module,\n            content: updatedContent\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  },\n  handleDeleteQuestion: (moduleIndex, questionIndex) => {\n    set(state => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedContent = [...module.content];\n          updatedContent[questionIndex].question.splice(questionIndex, 1);\n          return { ...module,\n            content: updatedContent\n          };\n        }\n\n        return module;\n      });\n      return { ...state,\n        course: { ...state.course,\n          modules: updatedModules\n        }\n      };\n    });\n  }\n}));\nexport default useCourseStore;","map":{"version":3,"sources":["/home/dresito/GitHub/Trade-Learn-Frontend/src/store/store.js"],"names":["create","initialState","course","name","description","modules","useCourseStore","set","setCourse","newCourse","updateModuleInfo","moduleIndex","key","value","state","updatedModules","setModuleContent","content","map","module","idx","deleteContent","contentIndex","updatedContent","splice","addContent","contentType","push","type","url","text","existingQuizIndex","findIndex","quizData","question","answers","correctAnswer","handleQuestion","questionIndex","updatedQuestion","cIdx","handleAnswerChange","answerIndex","handleCorrectAnswerChange","handleAddQuestion","handleDeleteQuestion"],"mappings":"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","sourcesContent":["import create from \"zustand\"\n\nconst initialState = {\n  course: {\n    name: \"\",\n    description: \"\",\n    modules: []\n  }\n}\n\nconst useCourseStore = create((set) => ({\n  // State\n  course: initialState.course,\n\n  // Actions\n\n  // Actions\n  setCourse: (newCourse) => set({ course: newCourse }),\n\n  updateModuleInfo: (moduleIndex, key, value) => {\n    set((state) => {\n      const updatedModules = [...state.course.modules];\n      updatedModules[moduleIndex][key] = value;\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  setModuleContent: (moduleIndex, content) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          return { ...module, content };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  deleteContent: (moduleIndex, contentIndex) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          const updatedContent = [...module.content];\n          updatedContent.splice(contentIndex, 1);\n          return { ...module, content: updatedContent };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  addContent: (moduleIndex, contentType) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          let updatedContent = [...(module.content || [])];\n\n          if (contentType === \"video\") {\n            updatedContent.push({ type: \"video\", url: \"\" });\n          } else if (contentType === \"text\") {\n            updatedContent.push({ type: \"text\", text: \"\" });\n          } else if (contentType === \"quiz\") {\n            const existingQuizIndex = updatedContent.findIndex((content) => content.type === \"quiz\");\n            if (existingQuizIndex === -1) {\n              const quizData = {\n                question: \"\",\n                answers: [\"\", \"\", \"\", \"\"],\n                correctAnswer: \"\",\n              };\n              updatedContent.push({ type: \"quiz\", question: [quizData] });\n            }\n          }\n\n          return { ...module, content: updatedContent };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleQuestion: (moduleIndex, questionIndex, key, value) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex] };\n          updatedQuestion.question = value;\n          return {\n            ...module,\n            content: module.content.map((content, cIdx) => (cIdx === questionIndex ? updatedQuestion : content)),\n          };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleAnswerChange: (moduleIndex, questionIndex, answerIndex, value) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex] };\n          updatedQuestion.answers[answerIndex] = value;\n          return {\n            ...module,\n            content: module.content.map((content, cIdx) => (cIdx === questionIndex ? updatedQuestion : content)),\n          };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleCorrectAnswerChange: (moduleIndex, questionIndex, value) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedQuestion = { ...module.content[questionIndex] };\n          updatedQuestion.correctAnswer = value;\n          return {\n            ...module,\n            content: module.content.map((content, cIdx) => (cIdx === questionIndex ? updatedQuestion : content)),\n          };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleAddQuestion: (moduleIndex) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex) {\n          const updatedContent = [...(module.content || [])];\n          const existingQuizIndex = updatedContent.findIndex((content) => content.type === \"quiz\");\n\n          if (existingQuizIndex !== -1) {\n            const updatedQuestion = { question: \"\", answers: [\"\", \"\", \"\", \"\"], correctAnswer: \"\" };\n            updatedContent[existingQuizIndex].question.push(updatedQuestion);\n          }\n\n          return { ...module, content: updatedContent };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  },\n\n  handleDeleteQuestion: (moduleIndex, questionIndex) => {\n    set((state) => {\n      const updatedModules = state.course.modules.map((module, idx) => {\n        if (idx === moduleIndex && module.content[questionIndex].type === \"quiz\") {\n          const updatedContent = [...module.content];\n          updatedContent[questionIndex].question.splice(questionIndex, 1);\n          return { ...module, content: updatedContent };\n        }\n        return module;\n      });\n      return { ...state, course: { ...state.course, modules: updatedModules } };\n    });\n  }\n\n}))\n\nexport default useCourseStore;"]},"metadata":{},"sourceType":"module"}