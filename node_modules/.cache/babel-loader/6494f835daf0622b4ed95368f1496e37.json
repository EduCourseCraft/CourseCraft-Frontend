{"ast":null,"code":"import create from \"zustand\";\nconst useCourseStore = create(set => ({\n  course: {\n    name: \"\",\n    description: \"\",\n    modules: []\n  },\n  selectedOption: \"quiz\",\n  handleChangeSelect: (e, moduleIndex) => {\n    const {\n      value\n    } = e.target;\n    set(state => ({\n      selectedOption: value,\n      course: { ...state.course,\n        modules: state.course.modules.map((module, idx) => {\n          if (idx === moduleIndex) {\n            let updatedContents = [];\n\n            if (module.content) {\n              updatedContents = module.content.map(content => {\n                if (content.type === value) {\n                  if (value === \"video\") {\n                    return {\n                      type: \"video\",\n                      url: \"\"\n                    };\n                  } else if (value === \"text\") {\n                    return {\n                      type: \"text\",\n                      text: \"\"\n                    };\n                  } else if (value === \"quiz\") {\n                    const quizData = {\n                      question: \"\",\n                      answers: [\"\", \"\", \"\", \"\"],\n                      correctAnswer: \"\"\n                    };\n                    return {\n                      type: \"quiz\",\n                      question: [quizData]\n                    };\n                  }\n                }\n\n                return content;\n              });\n            }\n\n            return { ...module,\n              content: updatedContents\n            };\n          }\n\n          return module;\n        })\n      }\n    }));\n  },\n  handleAddModule: () => {\n    set(state => ({\n      course: { ...state.course,\n        modules: [...state.course.modules, {\n          name: \"\",\n          content: []\n        }]\n      }\n    }));\n  },\n  handleModuleChange: (index, fieldName, fieldValue) => {\n    set(state => ({\n      course: { ...state.course,\n        modules: state.course.modules.map((module, idx) => {\n          if (idx === index) {\n            return { ...module,\n              [fieldName]: fieldValue\n            };\n          }\n\n          return module;\n        })\n      }\n    }));\n  },\n  handleDeleteContent: (moduleIndex, contentIndex) => {\n    set(state => ({\n      course: { ...state.course,\n        modules: state.course.modules.map((module, idx) => {\n          if (idx === moduleIndex) {\n            const updatedContents = module.content.filter((content, cIdx) => cIdx !== contentIndex);\n            return { ...module,\n              content: updatedContents\n            };\n          }\n\n          return module;\n        })\n      }\n    }));\n  },\n  handleAddContent: moduleIndex => {\n    set(state => ({\n      course: { ...state.course,\n        modules: state.course.modules.map((module, idx) => {\n          if (idx === moduleIndex) {\n            let updatedContents = [...(module.content || [])]; // Ensure content array exists or initialize as empty array\n\n            if (state.selectedOption === \"video\") {\n              updatedContents.push({\n                type: \"video\",\n                url: \"\"\n              });\n            } else if (state.selectedOption === \"text\") {\n              updatedContents.push({\n                type: \"text\",\n                text: \"\"\n              });\n            } else if (state.selectedOption === \"quiz\") {\n              // Check if there's already a quiz content, if not, add it\n              const existingQuizContentIndex = updatedContents.findIndex(content => content.type === \"quiz\");\n\n              if (existingQuizContentIndex === -1) {\n                const quizData = {\n                  question: \"\",\n                  answers: [\"\", \"\", \"\", \"\"],\n                  correctAnswer: \"\"\n                };\n                updatedContents.push({\n                  type: \"quiz\",\n                  question: [quizData]\n                });\n              }\n            }\n\n            return { ...module,\n              content: updatedContents\n            };\n          }\n\n          return module;\n        })\n      }\n    }));\n  },\n  handleDeleteModule: moduleIndex => {\n    set(state => ({\n      course: { ...state.course,\n        modules: state.course.modules.filter((_, idx) => idx !== moduleIndex)\n      }\n    }));\n  },\n  handleContentChange: (moduleIndex, contentIndex, fieldName, fieldValue) => {\n    set(state => ({\n      course: { ...state.course,\n        modules: state.course.modules.map((module, mIndex) => {\n          if (mIndex === moduleIndex) {\n            const updatedContent = module.content.map((content, cIndex) => {\n              if (cIndex === contentIndex) {\n                return { ...content,\n                  [fieldName]: fieldValue\n                };\n              }\n\n              return content;\n            });\n            return { ...module,\n              content: updatedContent\n            };\n          }\n\n          return module;\n        })\n      }\n    }));\n  },\n  handleInputChange: (fieldName, fieldValue) => {\n    set(state => ({\n      course: { ...state.course,\n        [fieldName]: fieldValue\n      }\n    }));\n  }\n}));\nexport default useCourseStore;","map":{"version":3,"sources":["/home/dresito/GitHub/Trade-Learn-Frontend/src/store/store.js"],"names":["create","useCourseStore","set","course","name","description","modules","selectedOption","handleChangeSelect","e","moduleIndex","value","target","state","map","module","idx","updatedContents","content","type","url","text","quizData","question","answers","correctAnswer","handleAddModule","handleModuleChange","index","fieldName","fieldValue","handleDeleteContent","contentIndex","filter","cIdx","handleAddContent","push","existingQuizContentIndex","findIndex","handleDeleteModule","_","handleContentChange","mIndex","updatedContent","cIndex","handleInputChange"],"mappings":"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","sourcesContent":["import create from \"zustand\";\n\nconst useCourseStore = create((set) => ({\n  course: {\n    name: \"\",\n    description: \"\",\n    modules: [],\n  },\n  selectedOption: \"quiz\",\n\n  handleChangeSelect: (e, moduleIndex) => {\n    const { value } = e.target;\n\n    set((state) => ({\n      selectedOption: value,\n      course: {\n        ...state.course,\n        modules: state.course.modules.map((module, idx) => {\n          if (idx === moduleIndex) {\n            let updatedContents = [];\n\n            if (module.content) {\n              updatedContents = module.content.map((content) => {\n                if (content.type === value) {\n                  if (value === \"video\") {\n                    return { type: \"video\", url: \"\" };\n                  } else if (value === \"text\") {\n                    return { type: \"text\", text: \"\" };\n                  } else if (value === \"quiz\") {\n                    const quizData = {\n                      question: \"\",\n                      answers: [\"\", \"\", \"\", \"\"],\n                      correctAnswer: \"\",\n                    };\n                    return { type: \"quiz\", question: [quizData] };\n                  }\n                }\n                return content;\n              });\n            }\n\n            return {\n              ...module,\n              content: updatedContents,\n            };\n          }\n          return module;\n        }),\n      },\n    }));\n  },\n\n  handleAddModule: () => {\n    set((state) => ({\n      course: {\n        ...state.course,\n        modules: [...state.course.modules, { name: \"\", content: [] }],\n      },\n    }));\n  },\n\n  handleModuleChange: (index, fieldName, fieldValue) => {\n    set((state) => ({\n      course: {\n        ...state.course,\n        modules: state.course.modules.map((module, idx) => {\n          if (idx === index) {\n            return { ...module, [fieldName]: fieldValue };\n          }\n          return module;\n        }),\n      },\n    }));\n  },\n\n  handleDeleteContent: (moduleIndex, contentIndex) => {\n    set((state) => ({\n      course: {\n        ...state.course,\n        modules: state.course.modules.map((module, idx) => {\n          if (idx === moduleIndex) {\n            const updatedContents = module.content.filter(\n              (content, cIdx) => cIdx !== contentIndex\n            );\n            return {\n              ...module,\n              content: updatedContents,\n            };\n          }\n          return module;\n        }),\n      },\n    }));\n  },\n\n  handleAddContent: (moduleIndex) => {\n    set((state) => ({\n      course: {\n        ...state.course,\n        modules: state.course.modules.map((module, idx) => {\n          if (idx === moduleIndex) {\n            let updatedContents = [...(module.content || [])]; // Ensure content array exists or initialize as empty array\n\n            if (state.selectedOption === \"video\") {\n              updatedContents.push({ type: \"video\", url: \"\" });\n            } else if (state.selectedOption === \"text\") {\n              updatedContents.push({ type: \"text\", text: \"\" });\n            } else if (state.selectedOption === \"quiz\") {\n              // Check if there's already a quiz content, if not, add it\n              const existingQuizContentIndex = updatedContents.findIndex(\n                (content) => content.type === \"quiz\"\n              );\n              if (existingQuizContentIndex === -1) {\n                const quizData = {\n                  question: \"\",\n                  answers: [\"\", \"\", \"\", \"\"],\n                  correctAnswer: \"\",\n                };\n                updatedContents.push({ type: \"quiz\", question: [quizData] });\n              }\n            }\n\n            return {\n              ...module,\n              content: updatedContents,\n            };\n          }\n          return module;\n        }),\n      },\n    }));\n  },\n\n  handleDeleteModule: (moduleIndex) => {\n    set((state) => ({\n      course: {\n        ...state.course,\n        modules: state.course.modules.filter((_, idx) => idx !== moduleIndex),\n      },\n    }));\n  },\n\n  handleContentChange: (moduleIndex, contentIndex, fieldName, fieldValue) => {\n    set((state) => ({\n      course: {\n        ...state.course,\n        modules: state.course.modules.map((module, mIndex) => {\n          if (mIndex === moduleIndex) {\n            const updatedContent = module.content.map((content, cIndex) => {\n              if (cIndex === contentIndex) {\n                return { ...content, [fieldName]: fieldValue };\n              }\n              return content;\n            });\n            return { ...module, content: updatedContent };\n          }\n          return module;\n        }),\n      },\n    }));\n  },\n\n  handleInputChange: (fieldName, fieldValue) => {\n    set((state) => ({\n      course: {\n        ...state.course,\n        [fieldName]: fieldValue,\n      },\n    }));\n  }\n\n}))\n\nexport default useCourseStore;\n"]},"metadata":{},"sourceType":"module"}